variables:
    major: 0
    minor: 1
    patch: 0
    versionNumber: $(major).$(minor).$(patch)
    debugVersionNumber: $(versionNumber)-b$(Build.BuildId)  

jobs:
- job: "linting"
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  # Lint commits
  - script: npm install
  - script: ./node_modules/.bin/commitlint-azure-pipelines
# Pre-Release Build  
- job: "BuildPreRelease"
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
  pool:
    vmImage: 'vs2017-win2016'
  displayName: "Build Pre-Release"
  dependsOn: "linting"
  steps:
  # Restore NuGet Packages
  - script: 'dotnet restore "src/Kraken.WebSockets.sln"'
    displayName: "Restore NuGet Packages"
  # Build all projects with specific version number
  - script: 'dotnet build "src/Kraken.WebSockets.sln" -c Release --no-restore -p:Version=$(debugVersionNumber)'
    displayName: 'dotnet build'
  # Execute defined tests and collect code coverage
  - task: DotNetCoreCLI@2
    displayName: 'dotnet test'
    inputs:
      command: test
      projects: src/Kraken.WebSockets.Tests/Kraken.WebSockets.Tests.csproj
      arguments: '--no-restore --no-build -c Release --collect "Code coverage" --settings:../../codecoverage.runsettings'
  # Create NuGet Package
  - script: dotnet pack "src/Kraken.WebSockets/Kraken.WebSockets.csproj" -c Release --no-build --output "$(Build.ArtifactStagingDirectory)" -p:Version=$(debugVersionNumber)
    displayName: "Create NuGet Package"
  - task: CopyFiles@2
    displayName: 'Copy Files to staging'
    inputs:
      SourceFolder: "./build"
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      pathtoPublish: "$(Build.ArtifactStagingDirectory)"
      artifactName: "drop"
- job: "DeployPreRelease"
  displayName: "Deploy Pre-Release"
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  dependsOn: "BuildPreRelease"
  steps:
  # Download artifacts
  - task: DownloadBuildArtifacts@0
    displayName: "Download files"
    inputs:
      artifactName: "drop"
      downloadPath: $(System.DefaultWorkingDirectory)
  # Publish NuGet Package
  - task: NuGetCommand@2
    displayName: "Publish Pre-Release to NuGet Gallery"
    inputs:
      command: push
      nuGetFeedType: external
      publishFeedCredentials: 'Official NuGet'
      packagesToPush: '$(System.DefaultWorkingDirectory)/**/*.nupkg;!$(System.DefaultWorkingDirectory)/**/*.symbols.nupkg'

# Release Build
- job: "BuildRelease"
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  pool:
    vmImage: 'vs2017-win2016'
  displayName: "Build Release"
  dependsOn: "linting"
  steps:
  # Restore NuGet Packages
  - script: 'dotnet restore "src/Kraken.WebSockets.sln"'
    displayName: "Restore NuGet Packages"
  # Build all projects with specific version number
  - script: 'dotnet build "src/Kraken.WebSockets.sln" -c Release --no-restore -p:Version=$(versionNumber)'
    displayName: 'dotnet build'
  # Execute defined tests and collect code coverage
  - task: DotNetCoreCLI@2
    displayName: 'dotnet test'
    inputs:
      command: test
      projects: src/Kraken.WebSockets.Tests/Kraken.WebSockets.Tests.csproj
      arguments: '--no-restore --no-build -c Release --collect "Code coverage" --settings:../../codecoverage.runsettings'
  # Create NuGet Package
  - script: dotnet pack "src/Kraken.WebSockets/Kraken.WebSockets.csproj" -c Release --no-build --output "$(Build.ArtifactStagingDirectory)" -p:Version=$(versionNumber)
    displayName: "Create NuGet Package"
  - task: CopyFiles@2
    displayName: 'Copy Files to staging'
    inputs:
      SourceFolder: "./build"
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      pathtoPublish: "$(Build.ArtifactStagingDirectory)"
      artifactName: "drop"
- job: "DeployRelease"
  displayName: "Deploy Release"
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  dependsOn: "BuildRelease"
  steps:
  # Download artifacts
  - task: DownloadBuildArtifacts@0
    displayName: "Download files"
    inputs:
      artifactName: "drop"
      downloadPath: $(System.DefaultWorkingDirectory)
  # Publish NuGet Package
  - task: NuGetCommand@2
    displayName: "Publish Release to NuGet Gallery"
    inputs:
      command: push
      nuGetFeedType: external
      publishFeedCredentials: 'Official NuGet'
      packagesToPush: '$(System.DefaultWorkingDirectory)/**/*.nupkg;!$(System.DefaultWorkingDirectory)/**/*.symbols.nupkg'
